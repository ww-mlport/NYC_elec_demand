lm_model <- lm(formula, data = train_poly)
lm_models[[as.character(degree)]] <- lm_model
rsquared_values[i] <- summary(lm_model)$r.squared
}
print(rsquared_values)
View(lm_models)
print(lm_models[[1]])
print(summary(lm_models[[1]])
print(summary(lm_models[[1]]))
summary(lm_models[[1]])
summary(lm_models[[1]])
summary(lm_models[[2]])
summary(lm_models[[3]])
summary(lm_models[[4]])
# Loop over different polynomial degrees
for (degree in 1:10) {
formula <- as.formula(paste(response_variable, "~", paste(c(paste("DryBulbTemperature", 1:degree, sep = "_"), independent_variables), collapse = "+")))
lm_model <- lm(formula, data = train_poly)
lm_models[[as.character(degree)]] <- lm_model
rsquared_values[i] <- summary(lm_models)$r.squared
}
# Loop over different polynomial degrees
for (degree in 1:10) {
formula <- as.formula(paste(response_variable, "~", paste(c(paste("DryBulbTemperature", 1:degree, sep = "_"), independent_variables), collapse = "+")))
lm_model <- lm(formula, data = train_poly)
lm_models[[as.character(degree)]] <- lm_model
rsquared_values[i] <- summary(lm_model)$r.squared
}
# Loop over different polynomial degrees
for (degree in 1:10) {
formula <- as.formula(paste(response_variable, "~", paste(c(paste("DryBulbTemperature", 1:degree, sep = "_"), independent_variables), collapse = "+")))
lm_model <- lm(formula, data = train_poly)
lm_models[[as.character(degree)]] <- lm_model
rsquared_values[i] <- summary(lm_model[[i]])$r.squared
}
# Loop over different polynomial degrees
for (degree in 1:10) {
formula <- as.formula(paste(response_variable, "~", paste(c(paste("DryBulbTemperature", 1:degree, sep = "_"), independent_variables), collapse = "+")))
lm_model <- lm(formula, data = train_poly)
library(tidyverse)
library(lubridate)
library(rpart)
library(rpart.plot)
library(gbm)
library(dplyr)
library(randomForest)
library(xgboost)
library(caret)
wd <- "C:/Users/wwell/Documents/GitHub/demand_prediction_local/data/"
master <- read.csv(paste0 (wd, "master.csv"))
# convert columns to factors
columns_to_factor <- c("year", "month", "day", "hour", "weekdayorweekend")
master[columns_to_factor] <- lapply(master[columns_to_factor], factor)
#split data into test and train
train <- master %>%
filter(year %in% c(2016, 2017)) %>%
select(-year, -day)
hyper <- master %>%
filter(year == 2018) %>%
select(-year, -day)
test <- master %>%
filter(year == 2019) %>%
select(-year, -day)
#scale results
numeric_columns <- sapply(train, is.numeric)
data_sets <- list(train, hyper, test)
for (i in seq_along(data_sets)) {
data_sets[[i]][, numeric_columns] <- scale(data_sets[[i]][, numeric_columns])
}
train <- data_sets[[1]]
hyper <- data_sets[[2]]
test <- data_sets[[3]]
# Baseline Linear Regression
baseline_lr <- lm(MWh ~ ., data = train)
# results
summary(baseline_lr)
degree <- 10
train_poly_df <- as.data.frame(poly(train[, column_name], degree, raw = TRUE))
colnames(train_poly_df) <- paste(column_name, 1:degree, sep="_")
# CV
hyper_poly_df <- as.data.frame(poly(hyper[, column_name], degree, raw = TRUE))
colnames(hyper_poly_df) <- paste(column_name, 1:degree, sep="_")
# test
test_poly_df <- as.data.frame(poly(test[, column_name], degree, raw = TRUE))
colnames(test_poly_df) <- paste(column_name, 1:degree, sep="_")
# Baseline Linear Regression
baseline_lr <- lm(MWh ~ ., data = train)
# results
summary(baseline_lr)
# add polynomial for drybulb temperatore
column_name <- "DryBulbTemperature"
degree <- 10
train_poly_df <- as.data.frame(poly(train[, column_name], degree, raw = TRUE))
colnames(train_poly_df) <- paste(column_name, 1:degree, sep="_")
# CV
hyper_poly_df <- as.data.frame(poly(hyper[, column_name], degree, raw = TRUE))
colnames(hyper_poly_df) <- paste(column_name, 1:degree, sep="_")
# test
test_poly_df <- as.data.frame(poly(test[, column_name], degree, raw = TRUE))
colnames(test_poly_df) <- paste(column_name, 1:degree, sep="_")
# Combine the original dataframe and the polynomial features
train_poly <- cbind(train, train_poly_df)
hyper_poly <- cbind(hyper, hyper_poly_df)
test_poly <- cbind(test, test_poly_df)
# dependent variable
response_variable <- "MWh"
# Names of columns to exclude from independent variables
exclude_columns <- c("MWh")
# Extract columns related to DryBulbTemperature
drybulb_columns <- grep("^DryBulbTemperature_", names(train_poly), value = TRUE)
# Names of other independent variables in the dataframe
independent_variables <- setdiff(names(train_poly), c(exclude_columns, drybulb_columns))
# list to store models
lm_models <- list()
# List to store R-squared values
rsquared_values <- list()
# Loop over different polynomial degrees
for (degree in 1:10) {
formula <- as.formula(paste(response_variable, "~", paste(c(paste("DryBulbTemperature", 1:degree, sep = "_"), independent_variables), collapse = "+")))
lm_model <- lm(formula, data = train_poly)
lm_models[[as.character(degree)]] <- lm_model
rsquared_values[[as.character(degree)]] <- summary(lm_model)$r.squared
}
View(rsquared_values)
View(lm_model)
# plot r-squared values for different poly degrees
plot(1:length(lm_models), rsquared_values, type = "b", xlab = "Model", ylab = "R-squared", main = "R-squared vs DryBulbTemp Poly")
View(train_poly)
# 2 poly is selected
train_poly <- train_poly %>% select(-15:23)
# 2 poly is selected
train_poly <- train_poly %>% select(-(15:23))
# 2 poly is selected
train_poly <- train_poly %>% select(-c(15:23))
# Baseline Linear Regression
baseline_lr <- lm(MWh ~ ., data = train)
# results
summary(baseline_lr)
# add polynomial for drybulb temperatore
column_name <- "DryBulbTemperature"
degree <- 10
train_poly_df <- as.data.frame(poly(train[, column_name], degree, raw = TRUE))
colnames(train_poly_df) <- paste(column_name, 1:degree, sep="_")
# CV
hyper_poly_df <- as.data.frame(poly(hyper[, column_name], degree, raw = TRUE))
colnames(hyper_poly_df) <- paste(column_name, 1:degree, sep="_")
# test
test_poly_df <- as.data.frame(poly(test[, column_name], degree, raw = TRUE))
colnames(test_poly_df) <- paste(column_name, 1:degree, sep="_")
# Combine the original dataframe and the polynomial features
train_poly <- cbind(train, train_poly_df)
hyper_poly <- cbind(hyper, hyper_poly_df)
test_poly <- cbind(test, test_poly_df)
# dependent variable
response_variable <- "MWh"
# Names of columns to exclude from independent variables
exclude_columns <- c("MWh")
# Extract columns related to DryBulbTemperature
drybulb_columns <- grep("^DryBulbTemperature_", names(train_poly), value = TRUE)
# Names of other independent variables in the dataframe
independent_variables <- setdiff(names(train_poly), c(exclude_columns, drybulb_columns))
# list to store models
lm_models <- list()
# List to store R-squared values
rsquared_values <- list()
# Loop over different polynomial degrees
for (degree in 1:10) {
formula <- as.formula(paste(response_variable, "~", paste(c(paste("DryBulbTemperature", 1:degree, sep = "_"), independent_variables), collapse = "+")))
lm_model <- lm(formula, data = train_poly)
lm_models[[as.character(degree)]] <- lm_model
rsquared_values[[as.character(degree)]] <- summary(lm_model)$r.squared
}
# plot r-squared values for different poly degrees
plot(1:length(lm_models), rsquared_values, type = "b", xlab = "Poly", ylab = "R-squared", main = "R-squared vs DryBulbTemp Poly")
# 2 poly is selected
train_poly <- train_poly %>% select(-matches("^DryBulbTemperature_[1-9]$") | matches("^DryBulbTemperature_2$"))
# Baseline Linear Regression
baseline_lr <- lm(MWh ~ ., data = train)
# results
summary(baseline_lr)
# add polynomial for drybulb temperatore
column_name <- "DryBulbTemperature"
degree <- 10
train_poly_df <- as.data.frame(poly(train[, column_name], degree, raw = TRUE))
colnames(train_poly_df) <- paste(column_name, 1:degree, sep="_")
# CV
hyper_poly_df <- as.data.frame(poly(hyper[, column_name], degree, raw = TRUE))
colnames(hyper_poly_df) <- paste(column_name, 1:degree, sep="_")
# test
test_poly_df <- as.data.frame(poly(test[, column_name], degree, raw = TRUE))
colnames(test_poly_df) <- paste(column_name, 1:degree, sep="_")
# Combine the original dataframe and the polynomial features
train_poly <- cbind(train, train_poly_df)
hyper_poly <- cbind(hyper, hyper_poly_df)
test_poly <- cbind(test, test_poly_df)
# dependent variable
response_variable <- "MWh"
# Names of columns to exclude from independent variables
exclude_columns <- c("MWh")
# Extract columns related to DryBulbTemperature
drybulb_columns <- grep("^DryBulbTemperature_", names(train_poly), value = TRUE)
# Names of other independent variables in the dataframe
independent_variables <- setdiff(names(train_poly), c(exclude_columns, drybulb_columns))
# list to store models
lm_models <- list()
# List to store R-squared values
rsquared_values <- list()
# Loop over different polynomial degrees
for (degree in 1:10) {
formula <- as.formula(paste(response_variable, "~", paste(c(paste("DryBulbTemperature", 1:degree, sep = "_"), independent_variables), collapse = "+")))
lm_model <- lm(formula, data = train_poly)
lm_models[[as.character(degree)]] <- lm_model
rsquared_values[[as.character(degree)]] <- summary(lm_model)$r.squared
}
# plot r-squared values for different poly degrees
plot(1:length(lm_models), rsquared_values, type = "b", xlab = "Poly", ylab = "R-squared", main = "R-squared vs DryBulbTemp Poly")
# 2 poly is selected
train_poly <- train_poly %>% select(-matches("^DryBulbTemperature_[1-10]$") | matches("^DryBulbTemperature_2$"))
library(tidyverse)
library(lubridate)
library(rpart)
library(rpart.plot)
library(gbm)
library(dplyr)
library(randomForest)
library(xgboost)
library(caret)
wd <- "C:/Users/wwell/Documents/GitHub/demand_prediction_local/data/"
master <- read.csv(paste0 (wd, "master.csv"))
# convert columns to factors
columns_to_factor <- c("year", "month", "day", "hour", "weekdayorweekend")
master[columns_to_factor] <- lapply(master[columns_to_factor], factor)
#split data into test and train
train <- master %>%
filter(year %in% c(2016, 2017)) %>%
select(-year, -day)
hyper <- master %>%
filter(year == 2018) %>%
select(-year, -day)
test <- master %>%
filter(year == 2019) %>%
select(-year, -day)
#scale results
numeric_columns <- sapply(train, is.numeric)
data_sets <- list(train, hyper, test)
for (i in seq_along(data_sets)) {
data_sets[[i]][, numeric_columns] <- scale(data_sets[[i]][, numeric_columns])
}
train <- data_sets[[1]]
hyper <- data_sets[[2]]
test <- data_sets[[3]]
# Baseline Linear Regression
baseline_lr <- lm(MWh ~ ., data = train)
# results
summary(baseline_lr)
# add polynomial for drybulb temperatore
column_name <- "DryBulbTemperature"
degree <- 10
train_poly_df <- as.data.frame(poly(train[, column_name], degree, raw = TRUE))
colnames(train_poly_df) <- paste(column_name, 1:degree, sep="_")
# CV
hyper_poly_df <- as.data.frame(poly(hyper[, column_name], degree, raw = TRUE))
colnames(hyper_poly_df) <- paste(column_name, 1:degree, sep="_")
# test
test_poly_df <- as.data.frame(poly(test[, column_name], degree, raw = TRUE))
colnames(test_poly_df) <- paste(column_name, 1:degree, sep="_")
# Combine the original dataframe and the polynomial features
train_poly <- cbind(train, train_poly_df)
hyper_poly <- cbind(hyper, hyper_poly_df)
test_poly <- cbind(test, test_poly_df)
# dependent variable
response_variable <- "MWh"
# Names of columns to exclude from independent variables
exclude_columns <- c("MWh")
# Extract columns related to DryBulbTemperature
drybulb_columns <- grep("^DryBulbTemperature_", names(train_poly), value = TRUE)
# Names of other independent variables in the dataframe
independent_variables <- setdiff(names(train_poly), c(exclude_columns, drybulb_columns))
# list to store models
lm_models <- list()
# List to store R-squared values
rsquared_values <- list()
# Loop over different polynomial degrees
for (degree in 1:10) {
formula <- as.formula(paste(response_variable, "~", paste(c(paste("DryBulbTemperature", 1:degree, sep = "_"), independent_variables), collapse = "+")))
lm_model <- lm(formula, data = train_poly)
lm_models[[as.character(degree)]] <- lm_model
rsquared_values[[as.character(degree)]] <- summary(lm_model)$r.squared
}
# plot r-squared values for different poly degrees
plot(1:length(lm_models), rsquared_values, type = "b", xlab = "Poly", ylab = "R-squared", main = "R-squared vs DryBulbTemp Poly")
# 2 poly is selected
train_poly <- train_poly %>% select(-matches("^DryBulbTemperature_[1-10]$") | matches("^DryBulbTemperature_2$"))
# 2 poly is selected
train_poly <- train_poly %>% select(-matches("^DryBulbTemperature_(1|3:9|10)$"))
View(train_poly)
# 2 poly is selected
train_padd <- cbind(train, train_poly_df["DryBulbTemperature_2"])
View(train_padd)
summary(lm_models[[2]])
lm_model_poly2 <- lm(MWh ~ ., data = train_poly)
summary(lm_model_poly2)
lm_model_poly2 <- lm(MWh ~ ., data = train_padd)
summary(lm_model_poly2)
test_padd <- cbind(train, test_poly_df["DryBulbTemperature_2"])
test_padd <- cbind(test, test_poly_df["DryBulbTemperature_2"])
View(test_padd)
# calculate R squared for predictions
r_sq_predictions <- cor(data$MWh, data$predictions)^2
# calculate R squared for predictions
r_sq_predictions <- cor(test_padd$MWh, test_padd$predictions)^2
# predict using test set
lm_predict <- predict(lm_model_poly2, newdata = test_padd)
test_padd$predictions <- predictions
test_padd$predictions <- lm_predict
# calculate R squared for predictions
r_sq_predictions <- cor(test_padd$MWh, test_padd$predictions)^2
# Print the R-squared value for predictions
print(paste("R-squared value for predictions:", round(r_sq_predictions, 4)))
summary(lm_model_poly2)
# calculate metrics for predictions
mae_predictions <- mean(abs(test_padd$MWh - test_padd$predictions))
mse_predictions <- mean((test_padd$MWh - test_padd$predictions)^2)
rmse_predictions <- sqrt(mean((test_padd$MWh - test_padd$predictions)^2))
r_sq_predictions <- cor(test_padd$MWh, test_padd$predictions)^2
# Print the R-squared value for predictions
print(paste("MAE value for predictions:", round(mae_predictions, 4)))
print(paste("MSE value for predictions:", round(mse_predictions, 4)))
print(paste("RMSE value for predictions:", round(rmse_predictions, 4)))
print(paste("R-squared value for predictions:", round(r_sq_predictions, 4)))
plot(test_padd$MWh, type = "l", col = "blue", lty = 1, ylim = range(c(test_padd$MWh, predictions)),
xlab = "Index", ylab = "Miles Per Gallon", main = "Observed vs Predicted")
plot(test_padd$MWh, type = "l", col = "blue", lty = 1, ylim = range(c(test_padd$MWh, test_padd$predictions)),
xlab = "Index", ylab = "Miles Per Gallon", main = "Observed vs Predicted")
lines(predictions, col = "red", lty = 2)
lines(test_padd$predictions, col = "red", lty = 2)
lines(predictions, col = "red", lty = 2)
lines(test_padd$predictions, col = "red", lty = 2)
plot(test_padd$MWh, type = "l", col = "blue", lty = 1, ylim = range(c(test_padd$MWh, test_padd$predictions)),
xlab = "Index", ylab = "Miles Per Gallon", main = "Observed vs Predicted")
lines(test_padd$predictions, col = "red", lty = 2)
plot(1, type = "n", xlab = "Index", ylab = "Miles Per Gallon", main = "Observed vs Predicted", ylim = range(c(test_padd$MWh, test_padd$predictions)))
# Add lines for observed and predicted values
lines(test_padd$MWh, col = "blue", lty = 1)
plot(x_values, test_padd$MWh, type = "l", col = "blue", xlab = "Index", ylab = "Values", main = "MWh vs Predictions")
x_values <- seq_along(df)
plot(x_values, test_padd$MWh, type = "l", col = "blue", xlab = "Index", ylab = "Values", main = "MWh vs Predictions")
x_values <- seq_along(test_padd)
plot(x_values, test_padd$MWh, type = "l", col = "blue", xlab = "Index", ylab = "Values", main = "MWh vs Predictions")
x_values <- seq_along(test_padd$MWh)
plot(x_values, test_padd$MWh, type = "l", col = "blue", xlab = "Index", ylab = "Values", main = "MWh vs Predictions")
lines(x_values, test_padd$predictions, col = "red")
plot(x_values, test_padd$MWh, type = "l", col = "blue", xlab = "Index", ylab = "Values", main = "MWh vs Predictions")
lines(x_values, test_padd$predictions, col = "red")
plot(x_values, test_padd$MWh, type = "l", col = "blue", xlab = "Index", ylab = "Values", main = "MWh vs Predictions")
plot.new()
plot(x_values, test_padd$MWh, type = "l", col = "blue", xlab = "Index", ylab = "Values", main = "MWh vs Predictions")
lines(x_values, test_padd$predictions, col = "red")
df_long <- tidyr::pivot_longer(test_padd, cols = c(MWh, predictions), names_to = "Variable", values_to = "Value")
# Plot using ggplot2
ggplot(df_long, aes(x = row_number(), y = Value, color = Variable)) +
geom_line() +
labs(x = "Index", y = "Values", title = "MWh vs Predictions") +
theme_minimal()
View(df_long)
# Plot using ggplot2
ggplot(test_padd, aes(x = seq_along(MWh))) +
geom_line(aes(y = MWh, color = "MWh"), linetype = "solid") +
geom_line(aes(y = Values, color = "Values"), linetype = "solid") +
labs(x = "Index", y = "Values", title = "MWh vs Values") +
scale_color_manual(values = c("MWh" = "blue", "Values" = "red")) +
theme_minimal()
# Plot using ggplot2
ggplot(test_padd, aes(x = seq_along(MWh))) +
geom_line(aes(y = MWh, color = "MWh"), linetype = "solid") +
geom_line(aes(y = predictions, color = "Values"), linetype = "solid") +
labs(x = "Index", y = "Values", title = "MWh vs Values") +
scale_color_manual(values = c("MWh" = "blue", "Values" = "red")) +
theme_minimal()
# Plot using ggplot2
ggplot(test_padd, aes(x = seq_along(MWh))) +
geom_line(aes(y = MWh, color = "MWh"), linetype = "solid") +
geom_line(aes(y = predictions, color = "predictions"), linetype = "solid") +
labs(x = "Index", y = "Values", title = "MWh vs predictions") +
scale_color_manual(predictions = c("MWh" = "blue", "predictions" = "green")) +
theme_minimal()
# Plot using ggplot2
ggplot(test_padd, aes(x = seq_along(MWh))) +
geom_line(aes(y = MWh, color = "MWh"), linetype = "solid") +
geom_line(aes(y = predictions, color = "predictions"), linetype = "solid") +
labs(x = "Index", y = "Values", title = "MWh vs predictions") +
scale_color_manual(values = c("MWh" = "blue", "predictions" = "green")) +
theme_minimal()
# Plot using ggplot2
ggplot(test_padd, aes(x = seq_along(MWh))) +
geom_line(aes(y = MWh, color = "MWh"), linetype = "solid") +
geom_line(aes(y = predictions, color = "predictions"), linetype = "solid") +
labs(x = "Index", y = "Values", title = "MWh vs predictions") +
scale_color_manual(values = c("MWh" = "red", "predictions" = "blue")) +
theme_minimal()
print(paste("MAE value for predictions:", round(mae_predictions, 4)))
print(paste("MSE value for predictions:", round(mse_predictions, 4)))
print(paste("RMSE value for predictions:", round(rmse_predictions, 4)))
print(paste("R-squared value for predictions:", round(r_sq_predictions, 4)))
library(tidyverse)
library(lubridate)
library(rpart)
library(rpart.plot)
library(gbm)
library(dplyr)
library(randomForest)
library(xgboost)
library(caret)
wd <- "C:/Users/wwell/Documents/GitHub/demand_prediction_local/data/"
master <- read.csv(paste0 (wd, "master.csv"))
# convert columns to factors
columns_to_factor <- c("year", "month", "day", "hour", "weekdayorweekend")
master[columns_to_factor] <- lapply(master[columns_to_factor], factor)
#split data into test and train
train <- master %>%
filter(year %in% c(2016, 2017, 2018)) %>%
select(-year, -day)
hyper <- master %>%
filter(year == 2018) %>%
select(-year, -day)
test <- master %>%
filter(year == 2019) %>%
select(-year, -day)
#scale results
numeric_columns <- sapply(train, is.numeric)
data_sets <- list(train, hyper, test)
for (i in seq_along(data_sets)) {
data_sets[[i]][, numeric_columns] <- scale(data_sets[[i]][, numeric_columns])
}
train <- data_sets[[1]]
hyper <- data_sets[[2]]
test <- data_sets[[3]]
# Baseline Linear Regression
baseline_lr <- lm(MWh ~ ., data = train)
# results
summary(baseline_lr)
# add polynomial for drybulb temperatore
column_name <- "DryBulbTemperature"
degree <- 10
train_poly_df <- as.data.frame(poly(train[, column_name], degree, raw = TRUE))
colnames(train_poly_df) <- paste(column_name, 1:degree, sep="_")
# CV
hyper_poly_df <- as.data.frame(poly(hyper[, column_name], degree, raw = TRUE))
colnames(hyper_poly_df) <- paste(column_name, 1:degree, sep="_")
# test
test_poly_df <- as.data.frame(poly(test[, column_name], degree, raw = TRUE))
colnames(test_poly_df) <- paste(column_name, 1:degree, sep="_")
# Combine the original dataframe and the polynomial features
train_poly <- cbind(train, train_poly_df)
hyper_poly <- cbind(hyper, hyper_poly_df)
test_poly <- cbind(test, test_poly_df)
# dependent variable
response_variable <- "MWh"
# Names of columns to exclude from independent variables
exclude_columns <- c("MWh")
# Extract columns related to DryBulbTemperature
drybulb_columns <- grep("^DryBulbTemperature_", names(train_poly), value = TRUE)
# Names of other independent variables in the dataframe
independent_variables <- setdiff(names(train_poly), c(exclude_columns, drybulb_columns))
# list to store models
lm_models <- list()
# List to store R-squared values
rsquared_values <- list()
# Loop over different polynomial degrees
for (degree in 1:10) {
formula <- as.formula(paste(response_variable, "~", paste(c(paste("DryBulbTemperature", 1:degree, sep = "_"), independent_variables), collapse = "+")))
lm_model <- lm(formula, data = train_poly)
lm_models[[as.character(degree)]] <- lm_model
rsquared_values[[as.character(degree)]] <- summary(lm_model)$r.squared
}
# plot r-squared values for different poly degrees
plot(1:length(lm_models), rsquared_values, type = "b", xlab = "Poly", ylab = "R-squared", main = "R-squared vs DryBulbTemp Poly")
# 2 poly is selected, add to train and test
train_padd <- cbind(train, train_poly_df["DryBulbTemperature_2"])
test_padd <- cbind(test, test_poly_df["DryBulbTemperature_2"])
# train model
lm_model_poly2 <- lm(MWh ~ ., data = train_padd)
summary(lm_model_poly2)
# predict using test set
lm_predict <- predict(lm_model_poly2, newdata = test_padd)
test_padd$predictions <- lm_predict
# calculate metrics for predictions
mae_predictions <- mean(abs(test_padd$MWh - test_padd$predictions))
mse_predictions <- mean((test_padd$MWh - test_padd$predictions)^2)
rmse_predictions <- sqrt(mean((test_padd$MWh - test_padd$predictions)^2))
r_sq_predictions <- cor(test_padd$MWh, test_padd$predictions)^2
# Print the R-squared value for predictions
print(paste("MAE value for predictions:", round(mae_predictions, 4)))
print(paste("MSE value for predictions:", round(mse_predictions, 4)))
print(paste("RMSE value for predictions:", round(rmse_predictions, 4)))
print(paste("R-squared value for predictions:", round(r_sq_predictions, 4)))
rsquared_values <- numeric(5)  # For polynomials 1-5
x_values <- seq_along(test_padd$MWh)
plot.new()
plot(x_values, test_padd$MWh, type = "l", col = "blue", xlab = "Index", ylab = "Values", main = "MWh vs Predictions")
lines(x_values, test_padd$predictions, col = "red")
# Add legend
legend("topright", legend = c("MWh", "Predictions"), col = c("blue", "red"), lty = 1)
# Plot using ggplot2
ggplot(test_padd, aes(x = seq_along(MWh))) +
geom_line(aes(y = MWh, color = "MWh"), linetype = "solid") +
geom_line(aes(y = predictions, color = "predictions"), linetype = "solid") +
labs(x = "Index", y = "Values", title = "MWh vs predictions") +
scale_color_manual(values = c("MWh" = "red", "predictions" = "blue")) +
theme_minimal()
# results
summary(baseline_lr)
